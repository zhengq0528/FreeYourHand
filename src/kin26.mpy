import time
import usb_hid
import random
from adafruit_hid.keyboard import Keyboard
from adafruit_hid.keycode import Keycode

keyboard = Keyboard(usb_hid.devices)

TIMER_1_DELAY = 1
TIMER_2_DELAY = 220


now = time.monotonic()

timer_1_next_run = now + TIMER_1_DELAY
timer_2_next_run = now + 0

def random_delay(min_time, max_time):
    delay = random.uniform(min_time, max_time)
    time.sleep(delay)

def jumpdown(x):
        keyboard.press(Keycode.DOWN_ARROW)
        random_delay(0.01, 0.3)
        keyboard.press(Keycode.SPACE)
        random_delay(0.4, 0.6)
        keyboard.release(Keycode.SPACE)
        random_delay(0.11, 0.3)
        keyboard.release(Keycode.DOWN_ARROW)
        random_delay(0.11, 0.3)
        
def attack(x):
        keyboard.press(Keycode.A)
        time.sleep(1)
        keyboard.release(Keycode.A)
        keyboard.press(Keycode.SHIFT)
        random_delay(3,3.5)
        keyboard.release(Keycode.SHIFT)
        keyboard.press(Keycode.A)
        time.sleep(0.7)
        keyboard.release(Keycode.A)
    
        
def liftlock(x):
        time.sleep(0.35)
        keyboard.press(Keycode.LEFT_ARROW)
        time.sleep(0.25)
        keyboard.release(Keycode.LEFT_ARROW)
        time.sleep(0.45)
        random_delay(0.1, 0.2)
        keyboard.press(Keycode.A)
        time.sleep(0.9)
        keyboard.release(Keycode.A)
        time.sleep(0.35)
        keyboard.press(Keycode.RIGHT_ARROW)
        time.sleep(0.25)
        keyboard.release(Keycode.RIGHT_ARROW)
        random_delay(0.1, 0.2)
        attack(1)
 
def erda(x):
        keyboard.press(Keycode.DOWN_ARROW)
        random_delay(0.3, 0.4)
        keyboard.press(Keycode.G)
        random_delay(0.2, 0.3)
        keyboard.release(Keycode.G)
        random_delay(0.2, 0.3)
        keyboard.release(Keycode.DOWN_ARROW)
        random_delay(0.49, 0.6)

def tranL(x):
        time.sleep(0.2)
        keyboard.press(Keycode.ALT)
        keyboard.release(Keycode.ALT)
        time.sleep(0.8)
        keyboard.press(Keycode.ALT)
        keyboard.release(Keycode.ALT)
        time.sleep(0.2) 
    
def tranR(x):
        jumpdown(1)
        time.sleep(0.2)
        keyboard.press(Keycode.ALT)
        keyboard.release(Keycode.ALT)
        time.sleep(0.8)
        keyboard.press(Keycode.ALT)
        keyboard.release(Keycode.ALT)
        time.sleep(0.2)  
         
def upjump(x):
        
        keyboard.press(Keycode.UP_ARROW)
        keyboard.press(Keycode.SPACE)
        time.sleep(0.05) 
        keyboard.release(Keycode.SPACE)
        keyboard.press(Keycode.SPACE)
        time.sleep(0.3) 
        keyboard.release(Keycode.SPACE)
        keyboard.press(Keycode.SPACE)
        keyboard.release(Keycode.SPACE)
        time.sleep(0.05) 
        keyboard.release(Keycode.UP_ARROW)
        
def setup(x):
        time.sleep(0.5) 
        tranR(1) 
        time.sleep(0.5) 
        keyboard.press(Keycode.LEFT_ARROW)
        time.sleep(0.1) 
        keyboard.release(Keycode.LEFT_ARROW)
        random_delay(0.5, 0.7)
        upjump(1)
        random_delay(0.6, 1)
        erda(1)       
        jumpdown(1)
        time.sleep(0.5)
        keyboard.press(Keycode.W)
        random_delay(0.2, 0.3)
        keyboard.release(Keycode.W)
        keyboard.press(Keycode.TWO)
        random_delay(0.2, 0.3)
        keyboard.release(Keycode.TWO) 
        time.sleep(0.5) 
        tranL(1)
        time.sleep(0.5) 
        
        keyboard.press(Keycode.RIGHT_ARROW)
        time.sleep(0.1) 
        keyboard.release(Keycode.RIGHT_ARROW)
        random_delay(0.5, 0.7)
        upjump(1)
        random_delay(0.5, 0.7)


def rotate(x):
    i = 0
    while i<=x:
        liftlock(1)
        i+=1
        if i==3:
            time.sleep(0.5)
            keyboard.press(Keycode.W)
            random_delay(0.2, 0.3)
            keyboard.release(Keycode.W)

while True:
    now = time.monotonic()
    if now > timer_1_next_run:
        random_delay(0.25, 0.35)
        setup(1)
        random_delay(0.3, 0.4)
        keyboard.press(Keycode.A)
        time.sleep(0.8)
        keyboard.release(Keycode.A)
        rotate(5)
           
                                       
